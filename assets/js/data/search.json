[ { "title": "The Ultimate Terminal Setup for macOS: Tips, Tricks, and Customizations", "url": "/posts/terminal-setup-on-macos/", "categories": "", "tags": "macOS, terminal, iTerm, 1Password", "date": "2023-01-15 00:00:00 +0100", "snippet": "IntroThe terminal, also known as the command line interface (CLI), is a powerful tool that can greatly enhance our experience on macOS. One of the main advantages of using the terminal is that it g...", "content": "IntroThe terminal, also known as the command line interface (CLI), is a powerful tool that can greatly enhance our experience on macOS. One of the main advantages of using the terminal is that it gives us access to a wide range of powerful command-line tools and utilities. Additionally, we can increase our efficiency and speed of navigation and management of files and directories. The terminal also allows for scripting and automation of tasks through the use of shell scripts and gives us access to advanced features and settings that may not be available through the graphical user interface (GUI). By mastering the terminal, we can greatly increase our productivity and efficiency as power users.In this article, I will guide you through customizing and optimizing your terminal experience on macOS. The goal is that by the end you should have an advanced terminal configuration at your disposal.I am not affiliated with any of the apps or programs that I may mention or recommend. Any views or opinions expressed are solely my own and do not represent the views or opinions of any other organization or entity.Steps Homebrew iTerm2 Oh My Zsh rbenv and pyenv powerline-shell Enable Touch ID for sudo 1Password CLIHomebrewMake sure you have Homebrew installed. We will use it to install tools and applications.iTerm2First, let’s install iTerm2.brew install --cask iterm2Configuring the basic behaviours of iTerm2 is pretty straightforward as it already has great presets. If you want to customize it further I recommend starting with the official documentation. Usually, I only configure the following:Changing the coloursColours are always a question of personal preference. My favourite one so far is the Solarized Dark as it’s easy on my eyes. If you don’t like dark colours consider using Solarized Light. Experiment with the other presets as well.Go to Settings (Cmd + ,) -&gt; Profiles -&gt; Default -&gt; Colors -&gt; Color Presets... -&gt; Solarized DarkYou can find a lot more in the Online Gallery.Unlimited scrollbackToday’s Macs have so much RAM available we can safely increase or even completely remove the cap on history (scrollback). If you are a developer and compile or release something, the output can be extremely verbose. To be able to see everything properly it can be a good idea to turn off the limit on the scrollback buffer. If you experience a performance hit then you should fine-tune the Scrollback lines settings instead.Go to Settings -&gt; Profiles -&gt; Default -&gt; Terminal -&gt; Unlimited scrollbackNatural Text EditingThe last setting is for convenience. If you want to edit a command before executing and would like to use the same shortcuts you know and love everywhere in macOS, like jumping left and right by word (Option + Left / Option + Right) or going to the beginning (Cmd + Left) or the end of the line (Cmd + Right), you should set the Key Mapping to Natural Text Editing.Go to Settings -&gt; Profiles -&gt; Default -&gt; Keys -&gt; Key Mappings -&gt; Presets... -&gt; Natural Text EditingI think it’s easier than defining escape sequences to all our shortcuts.Oh My ZshWhat is Oh My Zsh and why do want it? Oh My Zsh is an open source, community-driven framework for managing your zsh configuration.Alright, but what is zsh? ZSH, also called the Z shell, is an extended version of the Bourne Shell (sh), with plenty of new features, and support for plugins and themes. SourceMakes sense, except what is a shell? A shell is a software program used to interpret commands that are input via a command-line interface, enabling users to interact with a computer by giving it instructions. SourceApple has already replaced the default shell from bash to zsh in macOS Catalina. In my eyes, we are just improving it further with Oh My Zsh which comes with tons of features. Let’s install it!sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"After the successful installation, we can start customizing it by editing our ~/.zshrc file. The contents of this file are executed every time we create a new session.This is my main config. (Will be extended in the upcoming steps.)ZSH_THEME=\"robbyrussell\"zstyle ':omz:update' mode autozstyle ':omz:update' frequency 1plugins=(bundler git macos xcode)export LANG=en_US.UTF-8export EDITOR='vim'First, we can set up our theme. If you don’t like this one, there is a lot more to choose from.The next two lines just make sure that our Oh My Zsh is automatically updated every day.Following that we can customize the plugins we use. There is a myriad of available plugins, but in my experience, a large portion of them just adds aliases that are pretty hard to remember when I can simply memorize the actual command itself. No need for indirections. For example, the brew plugin creates an alias bubc for brew upgrade &amp;&amp; brew cleanup. Which one seems easier to remember? For me, it’s usually the latter. Don’t get me wrong, these aliases can be useful, using the bundler plugin saved me a lot of time. Instead of writing manually bundle install 50+ times a day, I just say bi and we are ready to go. Experiment with what works for you.What’s an alias?The alias command lets us create shortcuts for commands that we may need to enter frequently, making them easier to remember and use.The last two lines set up the language environment and the preferred editor. If you are not familiar with the basics of vim I suggest choosing something else, like nano.rbenv and pyenvAs a developer or even a power user, sooner or later you’ll have to use Python and/or Ruby. If you are like me, working on multiple projects that use different versions of Python and Ruby you have to figure out how to handle multiple versions at the same time. I found rbenv and pyenv reliable and easy to use with similar commands. Both can be installed with Homebrew.brew install rbenv ruby-buildbrew install pyenvAt the end of the installation brew will tell us about the initialization of these environments. The point is that when we start our terminal session we have to initialize the Ruby and Python environments. We can do this by putting the following commands into our ~/.zsrc.# Rubyif command -v rbenv 1&gt;/dev/null 2&gt;&amp;1; then eval \"$(rbenv init -)\"fi# Pythonif command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then eval \"$(pyenv init -)\"fiAfter we’ve edited our ~/.zshrc we have to reload the configuration by either closing the terminal and opening a new session, or executing the following command.source ~/.zshrcFinally, we can install our Ruby and Python.# List the latest stable versions and choose one (at the time of writing it's 3.2.0)rbenv install -l# Install Ruby 3.2.0rbenv install 3.2.0# Make Ruby 3.2.0 the default Ruby on the computer (first in PATH)rbenv global 3.2.0# List the latest stable versions and choose one (at the time of writing it's 3.11.1)pyenv install -l# Install Python 3.11.1pyenv install 3.11.1# Make Python 3.11.1 the default Python on the computer (first in PATH)pyenv global 3.2.0powerline-shellThe Open Source powerline-shell can make our terminal look even better. Installation is pretty easy after we have a Python installed.pip install powerline-shellAfter the successful installation let’s create the config file for it and place it here: ~/.config/powerline-shell/config.json. The configuration is further explained here. Customize for your needs.{ \"segments\": [\"virtual_env\", \"ssh\", \"cwd\", \"git\", \"hg\", \"jobs\", \"root\"]}Finally, we have to edit our ~/.zshrc once again to initialize it in every session.# Powerlinefunction powerline_precmd() { PS1=\"$(powerline-shell --shell zsh $?)\"}function install_powerline_precmd() { for s in \"${precmd_functions[@]}\"; do if [ \"$s\" = \"powerline_precmd\" ]; then return fi done precmd_functions+=(powerline_precmd)}if [ \"$TERM\" != \"linux\" ]; then install_powerline_precmdfiOnce you start a new session (or source the zsh config), you will notice these weird-looking characters. Let’s fix those by installing a proper font.Meslo Powerline Font Download the font from here: Meslo Powerline Font. Open it and install it via macOS’s Font Book. In iTerm2 change the font: go to Settings -&gt; Profiles -&gt; Default -&gt; Text -&gt; Font and select Meslo LG M for Powerline. Optionally you can also adjust the size of the text. I prefer 14pt.Enable Touch ID for sudoUp until now, most of our commands ran without having to type in our password.The Unix and Linux operating systems’ sudo command stands for superuser do. A user can run a command with the superuser’s (also known as the root user’s) privileges, enabling them to carry out operations that the system would otherwise restrict. You will be prompted for your password when you use sudo to run a command. This is a safety precaution to guarantee that only users with permission to act as superusers can. If you have a Touch ID on your Mac or Magic Keyboard you can set it up to be able to use it instead of typing in the password.A word of advice: DO NOT MAKE A MISTAKE EDITING THE FOLLOWING FILE!Open the sudo file:sudo vim /etc/pam.d/sudoThen insert the following line to the top:auth sufficient pam_tid.soSave the file and close it. Open a new session (after typing in your password you will be able to sudo for a little while) and test your setting, e.g.: sudo ls. It should prompt you to the system’s Touch ID screen.1Password CLII love 1Password. It really feels like I’m using a first-party application. Recently they’ve come up with something even more amazing: the 1Password CLI. There are tons of possibilities with it, I’m still playing with it but it’s already useful for a bunch of things. Let me show you some.If you have a 1Password subscription and the app is installed already, you can install the 1Password CLI via brew:brew install --cask 1password/tap/1password-cliYou can also verify if the installation was successful:op --versionTo set it up just enable Touch ID and connect the two programs and finally log in with the CLI. Go to Settings -&gt; Security -&gt; turn on Touch ID, then go to Settings -&gt; Developer -&gt; turn on Connect with 1Password CLI. (Later we will also turn on the Use the SSH agent.) Sign in to the 1Password CLI by issuing any command, like op vault ls.A huge problem even for experienced, senior software engineers is how they are storing their passwords and secrets. Sometimes they just put them in an environment variable or a configuration file. This is really bad. With 1Password CLI we can do better without sacrificing convenience. Currently, I’m mainly using it for two things: Store and load secrets securely Authenticate with SSH automaticallyStore and load secrets securly With 1Password CLI, you can use secret references to securely load secrets saved in 1Password in environment variables, configuration files, and anywhere else you might need them, without putting any plaintext secrets in code. At runtime, secret references are automatically replaced with the actual secrets they refer to. SourceLet’s see an example. We are using Danger to automate some parts of our code review process. If we want to connect it to Bitbucket Cloud, we need the UUID, the username and an app password. I stored these in 1Password and then created environment variables in my ~/.zshrc.export DANGER_BITBUCKETCLOUD_UUID=\"op://Work/Atlassian/Info/UUID\"export DANGER_BITBUCKETCLOUD_USERNAME=\"op://Work/Atlassian/Info/username\"export DANGER_BITBUCKETCLOUD_PASSWORD=\"op://Work/Atlassian/AppPasswords/Danger\"Before executing the danger command locally, I just have to prefix it with op run -- and the environment variables will be replaced with the actual passwords. It’s amazing!op run -- bundle exec danger pr https://bitbucket.org/...`Note: running this command prompts for your Touch ID.Authenticate with SSH automaticallyI have a lot of SSH keys, usually using a different one for each and every Git provider and client we are working for. Managing these, especially if you have multiple Bitbucket accounts for example can be a pain. Writing complex ssh configurations. 1Password CLI comes to our rescue here as well.First, we can store our SSH keys in 1Password vaults, which is already better than the default ~/.ssh directory. The real kicker, however, is that we can automatically authenticate with our Touch ID when we perform git commands. It’s like magic. 🎉To set this up follow the guide. The main steps are: Turning on Settings -&gt; Developer -&gt; Use the SSH agent Add the proper config to your SSH config (~/.ssh/config). 1Password settings will show it.Host *\tIdentityAgent \"~/Library/Group Containers/XXXXXXXXXX.com.1password/t/agent.sock\" Add your SSH keys to your Vault Done ✅Other ideasBy browsing the documentation we can see that there are other possibilities, like Connecting to Servers Integrate 1Password to CI/CD solutions Tinker with web development Better integrate your workflow into VS Code etc.AcknowledgementYears ago I’ve started my terminal customization journey thanks to Felix Krause, the original creator of fastlane.tools. To this day I still use a large part of his ideas.SummaryIf you’ve reached this point you should have a customized terminal environment setup. Congratulations! As a developer or power user, setting up our terminal can significantly increase our productivity and efficiency. We can improve our command-line experience by streamlining our workflow, adding useful command-line tools, and customizing our prompt. Additionally, we can manage our code changes and collaborate with others by setting up our terminal to work with version control systems like Git. With 1Password we can also mitigate some of the security issues, but don’t forget to keep your command-line and terminal tools up to date.Versions macOS Ventura 13.1 (22C65) iTerm Build 3.4.19 rbenv 1.2.0 Ruby 3.2.0 pyenv 2.3.10 Python 3.11.1 1Password for Mac 8.9.13 (80913040) 1Password CLI 2.12.0 " }, { "title": "How to add epub to SuperMemo", "url": "/posts/how-to-add-epub-to-supermemo/", "categories": "", "tags": "macOS, SuperMemo, epub", "date": "2022-02-05 00:00:00 +0100", "snippet": "Update 2022.07.02.I’ve updated the article by no longer recommending split and spread as the last step, mainly because I couldn’t always keep up with the schedule thus the order of the splits chang...", "content": "Update 2022.07.02.I’ve updated the article by no longer recommending split and spread as the last step, mainly because I couldn’t always keep up with the schedule thus the order of the splits changed which resulted in me seeing subsequent chapters without first having a chance to process the preceding ones. I’m sure these scheduling problems are fixable but I’m not sure how to do it quickly and easily. So my recommendation is NOT to split and spread books just read them incrementally as a whole.IntroI’m a rather quick learner. However, I’ve been struggling with actually remembering the material for a longer period. Recently I’ve found Anki and SuperMemo. Both applications are wonderful, but ultimately I’ve chosen SuperMemo, mainly because of its Incremental Reading feature. I’m still very early in my journey to learn using it proficiently. (SuperMemo is a Windows-only software that I’m using with Parallels Desktop for Mac)I’m planning to read a lot of books with incremental reading but one of the first problems I’ve encountered is that SuperMemo doesn’t support .epub natively. This short guide presents my findings on importing a book into SuperMemo.Main steps Have a DRM free epub Import it to Calibre and convert it from epub to epub Convert to html Clean up html and optimize images Import to SuperMemo Fix images, set up references Adjust priorityHave a DRM free .epubIn my experience, most of the epubs out there are suitable candidates for conversion. There are also ways to remove DRM from az epub, but due to my understanding, it’s a grey area. I’ve wanted to import the official Swift book, The Swift Programming Language. This book is written by Apple and is available for free in the official Apple Books application. Exporting from Books is as simple as dragging the book to Finder. However, I had a small hiccup importing this book to Calibre because Apple uses a non-standard epub format. Erica Sadun has found a simple solution to resolve this issue.Import to Calibre and convertCalibre is a wonderful piece of software full of well-written features. I’ve found that even if I already have an .epub it might be worth converting it from epub to epub as it seems to be producing a somewhat cleaner result.Convert to htmlHaving an .epub then from Calibre, I’m using Pandoc, the universal document converter to convert it to html. Install Pandoc on macOS via Homebrew:brew install pandocSuperMemo’s support for styles and images is somewhat limited. Even if the .epub has some fancy fonts and colors it would probably look bad in SuperMemo. This is why we have to take a minimalistic approach during the conversion.pandoc -M document-css=false -s --extract-media=Apple-TheSwift55ProgrammingLanguage Apple-TheSwift55ProgrammingLanguage.epub -o Apple-TheSwift55ProgrammingLanguage.htmlThis command upon success will generate an html file and a folder full of images.Clean up html and optimize imagesOpening the html file in our favorite editor we can see a lot of noise/clutter that seamingly doesn’t provide anything valuable. I got rid of them by searching for the following regular expressions and replacing them with an empty string: ( class=\"[^\"]+\") and (class=\"[^\"]+\") ( id=\"[^\"]+\") and (id=\"[^\"]+\")As a final step before the import, I ran all images through ImageOptim saving a little space without compromising on the quality.Import to SuperMemo Copy the .html file and the folder full of images to the root of C:\\. Open the .html file with Internet Explorer (😢) Select all (Ctrl + A) and copy (Ctrl + C) Open SuperMemo, create a new article/topic (Ctrl + N) and paste (Ctrl + V) Remove anything that you deem unnecessary. (Table of Contents, Index, Acknowledgements, etc.) Using Alt + Q set the Reference fields accordingly. For me, the bare minimum is to set the author title date Fix images, set up referencesThe book is imported, we could jump to the next, final step, however, the image references are currently pointing to the root where we’ve copied the folder. (e.g.: C:/Apple-TheSwift55ProgrammingLanguage/) If the images are removed from there they won’t show up in SuperMemo again. I haven’t found a standard solution for this, but I wanted to know these images in safety so I did the following. Depending on where SuperMemo is installed (for me it’s C:/SuperMemo) inside systems, next to my collection I’ve created a new Images folder. I’ve copied all the images here: C:/SuperMemo/systems/Images/Books/Apple-TheSwift55ProgrammingLanguage/ The last step is to open the book’s .HTM file from SuperMemo in an external editor (Ctrl + F9) and replace the image paths.file:///C:/Apple-TheSwift55ProgrammingLanguage/file:///C:/SuperMemo/systems/Images/Books/Apple-TheSwift55ProgrammingLanguage/ Later on it’s recommended to gradually import the images into image components (that will be saved to the image registry) instead of leaving it in the html with reference. Parallels Desktop for Mac is amazing, somehow it integrates the Mac apps into Windows’s interface. I could set Visual Studio Code (Mac) as a default app for .HTM file extension on Windows!Adjust priorityAfter fixing up everything one last step remains. Adjusting the book’s priority. It’s done by pressing Alt + P then specifying either a percentage or a position. Please note that position 1 equals to 0% that is 0% means this topic is top priority.Split &amp; SpreadThe only case where I had to do splitting, either way, was when the imported book was so massively big that it caused performance issues with SuperMemo and the UI became unresponsive for a long time every time the book was being opened.I’ve mostly followed Pleasurable Learning SuperMemo’s great step-by-step video to do this.One of the most useful tricks I’ve learned is to NOT to use SuperMemo’s default splitting as it messes up the topics a little. Instead specify a custom tag, that’s usually &lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt; with epubs converted to html.Splitting up this way is a little cumbersome, but doable in a relatively short time. After the split, we can spread the material according to our schedule.References Anki SuperMemo Parallels Desktop for Mac Incremental leading How to import and process an epub book with inline images using Pandoc: A Comprehensive guide Converting the Swift Programming Language to PDF Change default programs in Windows 10 Calibre Image Optim SuperMemo Help Glossary:Priority" } ]
